/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
/// <reference path="../declares.d.ts" />
'use strict';
define(["require", "exports"], function (require, exports) {
    exports.language = {
        displayName: 'Unity Shader',
        name: 'shader',
        mimeTypes: [],
        defaultToken: '',
        lineComment: '//',
        blockCommentStart: '/*',
        blockCommentEnd: '*/',
        autoClosingPairs: [['{', '}'], ['[', ']'], ['(', ')'], ['"', '"']],
        keywords: [
            //-- BEGIN KEYWORDS --//
            'BlendState',
            'break',
            'Buffer',
            'cbuffer',
            'class',
            'compile',
            'const',
            'continue',
            'DepthStencilState',
            'DepthStencilView',
            'discard',
            'do',
            'else',
            'extern',
            'false',
            'for',
            'GeometryShader',
            'if',
            'in',
            'inline',
            'inout',
            'interface',
            'namespace',
            'linear',
            'centroid',
            'nointerpolation',
            'noperspective',
            'sample',
            'out',
            'pass',
            'PixelShader',
            'precise',
            'RasterizerState',
            'RenderTargetView',
            'return',
            'register',
            'Sampler',
            'Sampler1D',
            'Sampler2D',
            'Sampler3D',
            'SamplerCUBE',
            'SamplerState',
            'SamplerComparisonState',
            'shared',
            'Stateblock',
            'StateblockState',
            'static',
            'struct',
            'switch',
            'tbuffer',
            'technique',
            'technique10',
            'technique11',
            'texture',
            'Texture1D',
            'Texture1DArray',
            'Texture2D',
            'Texture2DArray',
            'Texture2DMS',
            'Texture2DMSArray',
            'Texture3D',
            'TextureCube',
            'TextureCubeArray',
            'true',
            'typedef',
            'uniform',
            'VertexShader',
            'void',
            'volatile',
            'while',
            //-- END KEYWORDS --//

            //-- BEGIN TYPES --//
            'AppendStructuredBuffer',
            'bool',
            'bool2',
            'bool3',
            'bool4',
            'Buffer',
            'ByteAddressBuffer',
            'ConsumeStructuredBuffer',
            'double',
            'double2',
            'double3',
            'double4',
            'float',
            'float1x1',
            'float1x2',
            'float1x3',
            'float1x4',
            'float2',
            'float2x1',
            'float2x2',
            'float2x3',
            'float2x4',
            'float3',
            'float3x1',
            'float3x2',
            'float3x3',
            'float3x4',
            'float4',
            'float4x1',
            'float4x2',
            'float4x3',
            'float4x4',
            'half',
            'half2',
            'half3',
            'half4',
            'InputPatch',
            'int',
            'int2',
            'int3',
            'int4',
            'line',
            'lineadj',
            'LineStream',
            'matrix',
            'OutputPatch',
            'point',
            'PointStream',
            'RWBuffer',
            'RWByteAddressBuffer',
            'RWStructuredBuffer',
            'RWTexture1D',
            'RWTexture1DArray',
            'RWTexture2D',
            'RWTexture2DArray',
            'RWTexture3D',
            'string',
            'StructuredBuffer',
            'Texture1D',
            'Texture1DArray',
            'Texture2D',
            'Texture2DArray',
            'Texture2DMS',
            'Texture2DMSArray',
            'Texture3D',
            'triangle',
            'triangleadj',
            'TriangleStream',
            'uint',
            'uint2',
            'uint3',
            'uint4',
            'vector',
            //-- END TYPES --//

            //-- BEGIN FUNCTIONS --//
            'abs',
            'acos',
            'all',
            'AllMemoryBarrier',
            'AllMemoryBarrierWithGroupSync',
            'any',
            'asdouble',
            'asfloat',
            'asin',
            'asint',
            'asuint',
            'atan',
            'atan2',
            'ceil',
            'clamp',
            'clip',
            'cos',
            'cosh',
            'countbits',
            'cross',
            'D3DCOLORtoUBYTE4',
            'ddx',
            'ddx_coarse',
            'ddx_fine',
            'ddy',
            'ddy_coarse',
            'ddy_fine',
            'degrees',
            'determinant',
            'DeviceMemoryBarrier',
            'DeviceMemoryBarrierWithGroupSync',
            'distance',
            'dot',
            'dst',
            'EvaluateAttributeAtCentroid',
            'EvaluateAttributeAtSample',
            'EvaluateAttributeSnapped',
            'exp',
            'exp2',
            'f16tof32',
            'f32tof16',
            'faceforward',
            'firstbithigh',
            'firstbitlow',
            'floor',
            'fmod',
            'frac',
            'frexp',
            'fwidth',
            'GetRenderTargetSampleCount',
            'GetRenderTargetSamplePosition',
            'GroupMemoryBarrier',
            'GroupMemoryBarrierWithGroupSync',
            'InterlockedAdd',
            'InterlockedAnd',
            'InterlockedCompareExchange',
            'InterlockedCompareStore',
            'InterlockedExchange',
            'InterlockedMax',
            'InterlockedMin',
            'InterlockedOr',
            'InterlockedXor',
            'isfinite',
            'isinf',
            'isnan',
            'ldexp',
            'length',
            'lerp',
            'lit',
            'log',
            'log10',
            'log2',
            'mad',
            'max',
            'min',
            'modf',
            'mul',
            'noise',
            'normalize',
            'pow',
            'Process2DQuadTessFactorsAvg',
            'Process2DQuadTessFactorsMax',
            'Process2DQuadTessFactorsMin',
            'ProcessIsolineTessFactors',
            'ProcessQuadTessFactorsAvg',
            'ProcessQuadTessFactorsMax',
            'ProcessQuadTessFactorsMin',
            'ProcessTriTessFactorsAvg',
            'ProcessTriTessFactorsMax',
            'ProcessTriTessFactorsMin',
            'radians',
            'rcp',
            'reflect',
            'refract',
            'reversebits',
            'round',
            'rsqrt',
            'saturate',
            'sign',
            'sin',
            'sincos',
            'sinh',
            'smoothstep',
            'sqrt',
            'step',
            'tan',
            'tanh',
            'tex1D',
            'tex1Dbias',
            'tex1Dgrad',
            'tex1Dlod',
            'tex1Dproj',
            'tex2D',
            'tex2Dbias',
            'tex2Dgrad',
            'tex2Dlod',
            'tex2Dproj',
            'tex3D',
            'tex3Dbias',
            'tex3Dgrad',
            'tex3Dlod',
            'tex3Dproj',
            'texCUBE',
            'texCUBEbias',
            'texCUBEgrad',
            'texCUBElod',
            'texCUBEproj',
            'transpose',
            'trunc',
            //-- END FUNCTIONS --//
        ],
        operators: [
            '=',
            '>',
            '<',
            '!',
            '~',
            '?',
            ':',
            '==',
            '<=',
            '>=',
            '!=',
            '&&',
            '||',
            '++',
            '--',
            '+',
            '-',
            '*',
            '/',
            '&',
            '|',
            '^',
            '%',
            '<<',
            '>>',
            '>>>',
            '+=',
            '-=',
            '*=',
            '/=',
            '&=',
            '|=',
            '^=',
            '%=',
            '<<=',
            '>>=',
            '>>>='
        ],
        // we include these common regular expressions
        symbols: /[=><!~?:&|+\-*\/\^%]+/,
        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
        integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,
        floatsuffix: /[fFlL]?/,
        // The main tokenizer for our languages
        tokenizer: {
            root: [
                [/[a-zA-Z_]\w*/, { cases: { '@keywords': { token: 'keyword.$0' }, '@default': 'identifier' } }],
                { include: '@whitespace' },
                [/\[\[.*\]\]/, 'annotation'],
                [/^\s*#\w+/, 'keyword'],
                [/[{}()\[\]]/, '@brackets'],
                [/[<>](?!@symbols)/, '@brackets'],
                [/@symbols/, { cases: { '@operators': 'delimiter', '@default': '' } }],
                [/\d*\d+[eE]([\-+]?\d+)?(@floatsuffix)/, 'number.float'],
                [/\d*\.\d+([eE][\-+]?\d+)?(@floatsuffix)/, 'number.float'],
                [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],
                [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],
                [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],
                [/\d[\d']*\d(@integersuffix)/, 'number'],
                [/\d(@integersuffix)/, 'number'],
                [/[;,.]/, 'delimiter'],
                [/"([^"\\]|\\.)*$/, 'string.invalid'],
                [/"/, 'string', '@string'],
                [/'[^\\']'/, 'string'],
                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
                [/'/, 'string.invalid']
            ],
            whitespace: [
                [/[ \t\r\n]+/, ''],
                [/\/\*\*(?!\/)/, 'comment.doc', '@doccomment'],
                [/\/\*/, 'comment', '@comment'],
                [/\/\/.*$/, 'comment'],
            ],
            comment: [
                [/[^\/*]+/, 'comment'],
                [/\/\*/, 'comment.invalid'],
                [/\*\//, 'comment', '@pop'],
                [/[\/*]/, 'comment']
            ],
            //Identical copy of comment above, except for the addition of .doc
            doccomment: [
                [/[^\/*]+/, 'comment.doc'],
                [/\/\*/, 'comment.doc.invalid'],
                [/\*\//, 'comment.doc', '@pop'],
                [/[\/*]/, 'comment.doc']
            ],
            string: [
                [/[^\\"]+/, 'string'],
                [/@escapes/, 'string.escape'],
                [/\\./, 'string.escape.invalid'],
                [/"/, 'string', '@pop']
            ],
        },
    };
});
